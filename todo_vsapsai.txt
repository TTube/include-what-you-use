Investigate if IWYU produces forward declarations both in .h file and in .cc

GetClassRedecls is empty set for ObjCInterfaceDecl, see what consequences it can cause, most likely existing forward declarations are ignored
GetDefinitionForClass. Problem with returned fwd-decl is described below, most likely it may result that forward declaration is preferred over @interface
//TODO: find out test cases which fail for these particular scenarios
fwd-decl problems:
	in ObjC "Found forward-declare" is not called
	different fwd-decl handling:
		C++: TagType->getDecl() returns actual declaration, not fwd-decl, which is then replaced by fwd-decl as redecl in CalculateIwyuForForwardDeclareUse
		ObjC: ObjCInterfaceType->getDecl() can return fwd-decl, which is then handled like definition by GetDefinitionForClass called in CalculateIwyuForForwardDeclareUse

Implement OneUse::suggested_inclusion_kind(). It may depend on public headers, decl_filepath
Check by unit test that fix_include works correctly with #import

See into OneUse::has_suggested_header, when it is set

It is a little bit strange that in CalculateIwyuForForwardDeclareUse we emit
> Ignoring fwd-decl use of Impl (tests/mirror_objc.h:4:3): have definition at tests/mirror_objc-i1.h:1:7
because we actually not ignoring it later

Crude outline:
	Class as superclass needs import
	Class as ivar needs fwd-declare
		don't add one if there is already fwd-declare
	Class as method argument/return type needs fwd-declare
	Same for protocols
	Implementation files
		need class when call some method on its instance
		don't need class if just pass around variable

